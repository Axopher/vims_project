"""
Django settings for vims project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

ENVIRONMENT = config("ENVIRONMENT")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("DJANGO_SECRET_KEY")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = []

# Apps that must be installed in the public schema
SHARED_APPS = [
    "django_tenants",  # must be first
    "tenant",  # you must list the app where your tenant model resides in
    "user",
    "django.contrib.admin",
    "django.contrib.auth",  # required if User model in public
    "django.contrib.contenttypes",  # required by django & django-tenants
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "django_extensions",
    "drf_yasg",
]

# Apps that will be installed in each tenant schema
TENANT_APPS = [
    "user",
    "institute",
    "student",
    "employee",
    "course",
    "finance",
    "enrollment",
    "helpers",
    # The following Django contrib apps must be in TENANT_APPS
    "django.contrib.contenttypes",
    "django.contrib.auth",
    "django.contrib.admin",
    "django.contrib.sessions",
    "django.contrib.messages",
    "rest_framework_simplejwt.token_blacklist",
]

TENANT_MODEL = "tenant.Client"
TENANT_DOMAIN_MODEL = "tenant.Domain"

INSTALLED_APPS = SHARED_APPS + [app for app in TENANT_APPS if app not in SHARED_APPS]

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django_tenants.postgresql_backend",
        "HOST": config("POSTGRES_HOST"),
        "PORT": config("POSTGRES_PORT"),
        "NAME": config("POSTGRES_DB"),
        "USER": config("POSTGRES_USER"),
        "PASSWORD": config("POSTGRES_PASSWORD"),
    }
}

DATABASE_ROUTERS = ("django_tenants.routers.TenantSyncRouter",)


MIDDLEWARE = [
    "django_tenants.middleware.main.TenantMainMiddleware",  # important, first in chain for tenant schema routing
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "vims.urls"
PUBLIC_SCHEMA_URLCONF = "vims.urls_public"

AUTH_USER_MODEL = "user.User"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "vims.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# AWS S3 STORAGE CONFIGURATION
# These settings will be used by helpers/storage.py for Staging and Production
# ------------------------------------------------------------------------------
# PUBLIC BUCKET (for static files and public media like logos)
AWS_REGION = config("AWS_REGION", "")
AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID", "")
AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY", "")
AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME", "")
AWS_S3_CUSTOM_DOMAIN = config("AWS_S3_CUSTOM_DOMAIN", "")  # e.g., 'cdn.myapp.com'

# PRIVATE BUCKET (for sensitive user-uploaded media)
AWS_PRIVATE_REGION = config("AWS_PRIVATE_REGION", AWS_REGION)
AWS_PRIVATE_ACCESS_KEY_ID = config("AWS_PRIVATE_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
AWS_PRIVATE_SECRET_ACCESS_KEY = config(
    "AWS_PRIVATE_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY
)
AWS_PRIVATE_STORAGE_BUCKET_NAME = config("AWS_PRIVATE_STORAGE_BUCKET_NAME", "")
# Private domain will be the direct S3 URL, not a CDN
AWS_PRIVATE_S3_CUSTOM_DOMAIN = (
    f"s3.{AWS_PRIVATE_REGION}.amazonaws.com/{AWS_PRIVATE_STORAGE_BUCKET_NAME}"
)

AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}  # Cache for 1 day
AWS_DEFAULT_ACL = "public-read"  # Default for static files, but our custom storage overrides for media

# Default storage settings for production/staging. These will be overridden in local.py
STATICFILES_STORAGE = "storages.backends.s3boto3.S3StaticStorage"
DEFAULT_FILE_STORAGE = (
    "helpers.storage.CustomS3Storage"  # <-- IMPORTANT! Use our custom class
)

STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/static/"
MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/media/"


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "EXCEPTION_HANDLER": "helpers.exception_handler.vims_exception_handler",
    "DEFAULT_PAGINATION_CLASS": "helpers.pagination.VIMSPagination",
    "PAGE_SIZE": 10,
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": config("SECRET_JWT_SIGNING_KEY"),
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "idx",
    "USER_ID_CLAIM": "user_idx",
}


# Email Backend Settings
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
DEFAULT_FROM_EMAIL = "no-reply@vims.com"


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/
LANGUAGE_CODE = "en-us"
USE_I18N = True

# timezone & localization
USE_TZ = True
TIME_ZONE = "UTC"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LIVE = False
